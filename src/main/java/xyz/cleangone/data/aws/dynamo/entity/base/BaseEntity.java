package xyz.cleangone.data.aws.dynamo.entity.base;

import com.amazonaws.services.dynamodbv2.datamodeling.*;

import java.math.BigDecimal;
import java.util.Date;

@DynamoDBTable(tableName = "BaseDummy")
public class BaseEntity
{
    public static final EntityField ID_FIELD = new EntityField("base.id");
    public static final EntityField CREATED_DATE_FIELD = new EntityField("base.createdDate");
    public static final EntityField UPDATED_DATE_FIELD = new EntityField("base.updatedDate");

    protected String id;
    protected Date createdDate;
    protected Date updatedDate;

    public BaseEntity() { }

    public String get(EntityField field)
    {
        if (ID_FIELD.equals(field)) return getId();
        else throw new RuntimeException("Cannot get " + field);
    }

    public void set(EntityField field, String value)
    {
        if (ID_FIELD.equals(field)) { setId(value); }
        else throw new RuntimeException("Cannot set " + field);
    }

    public int getInt(EntityField field)
    {
        throw new RuntimeException("Cannot get int " + field);
    }
    public void setInt(EntityField field, int value)
    {
        throw new RuntimeException("Cannot set int " + field);
    }

    public Integer getInteger(EntityField field)

    {
        throw new RuntimeException("Cannot get Integer " + field);
    }
    public void setInteger(EntityField field, Integer value)
    {
        throw new RuntimeException("Cannot set Integer " + field);
    }

    public boolean getBoolean(EntityField field)
    {
        throw new RuntimeException("Cannot get Boolean " + field);
    }
    public void setBoolean(EntityField field, boolean value)
    {
        throw new RuntimeException("Cannot set Boolean " + field);
    }

    public BigDecimal getBigDecimal(EntityField field)
    {
        throw new RuntimeException("Cannot get BigDecimal " + field);
    }
    public void setBigDecimal(EntityField field, BigDecimal value)
    {
        throw new RuntimeException("Cannot set BigDecimal " + field);
    }

    public Date getDate(EntityField field)

    {
        throw new RuntimeException("Cannot get Date " + field);
    }
    public void setDate(EntityField field, Date value)
    {
        throw new RuntimeException("Cannot set Date " + field);
    }

    @DynamoDBHashKey(attributeName="Id")
    @DynamoDBAutoGeneratedKey
    public String getId() { return id;}
    public void setId(String id) {this.id = id;}

    @DynamoDBAttribute(attributeName="CreatedDate")
    public Date getCreatedDate()
    {
        return createdDate;
    }
    public void setCreatedDate(Date createdDate)
    {
        this.createdDate = createdDate;
    }
    public void setCreatedDate()
    {
        this.createdDate = new Date();
    }

    @DynamoDBAttribute(attributeName="UpdatedDate")
    public Date getUpdatedDate()
    {
        return updatedDate;
    }
    public void setUpdatedDate(Date updatedDate)
    {
        this.updatedDate = updatedDate;
    }
    public void setUpdatedDate()
    {
        this.updatedDate = new Date();
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof BaseEntity)) return false;

        BaseEntity that = (BaseEntity) o;

        if (getId() != null ? !getId().equals(that.getId()) : that.getId() != null) return false;
        if (getCreatedDate() != null ? !getCreatedDate().equals(that.getCreatedDate()) : that.getCreatedDate() != null) return false;
        return getUpdatedDate() != null ? getUpdatedDate().equals(that.getUpdatedDate()) : that.getUpdatedDate() == null;
    }

    @Override
    public int hashCode()
    {
        int result = getId() != null ? getId().hashCode() : 0;
        result = 31 * result + (getCreatedDate() != null ? getCreatedDate().hashCode() : 0);
        result = 31 * result + (getUpdatedDate() != null ? getUpdatedDate().hashCode() : 0);
        return result;
    }
}



